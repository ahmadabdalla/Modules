name: 'Deploy module'
description: 'Deploy module'

inputs:
  moduleName:
    description: 'The name of the module to deploy'
    required: true
  templateFilePath:
    description: 'The path to the template file to use for deployment'
    required: true
  parameterFilePath:
    description: 'The path to the parameter file to use for deployment'
    required: true
  location:
    description: 'The location to use for deployment'
    required: true
  resourceGroupName:
    description: 'The resource group to deploy to'
    required: false
  subscriptionId:
    description: 'The subscriptionId to deploy to'
    required: false
  managementGroupId:
    description: 'The managementGroupId to deploy to'
    required: false
  removeDeployment:
    description: 'Set "true" to set module up for removal'
    default: 'true'
    required: false

runs:
  using: 'composite'
  steps:
    - name: 'Setup agent & login'
      shell: pwsh
      run: |
        # Load used functions
        . ".github/actions/sharedScripts/Set-EnvironmentOnAgent.ps1"
        # Set agent up
        Set-EnvironmentOnAgent

    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - name: 'Replace Tokens [${{ inputs.parameterFilePath }}] '
      shell: pwsh
      run: |
        # Load used funtions
        . ".github/actions/sharedScripts/Convert-TokensInFileList.ps1"

        $DefaultParameterFileTokens = @(
            @{ Replace = '<<subscriptionId>>'; With = '${{ inputs.subscriptionId }}' }
            @{ Replace = '<<managementGroupId>>'; With = '${{ inputs.managementGroupId }}' }
            @{ Replace = '<<resourceGroupName>>'; With = '${{ inputs.resourceGroupName }}' }
            @{ Replace = '<<location>>'; With = '${{ inputs.location }}' }
        ) | ForEach-Object { [PSCustomObject]$PSItem }

        # Get Key Vault Information (If Provided)
        $KeyVaultInput = `
            @'
        ${{ inputs.keyVault }}
        '@
        if ($KeyVaultInput) {
            $KeyVaultObj = $KeyVaultInput | ConvertFrom-Json -ErrorAction SilentlyContinue
            $CustomParameterFileTokens = Get-AzKeyVaultSecret -Name $KeyVaultObj.CustomParameterFileTokensSecretName -VaultName $KeyVaultObj.keyVaultName -AsPlainText -ErrorAction SilentlyContinue |
                ConvertFrom-Json -ErrorAction SilentlyContinue
        }

        # Convert Tokens in Parameter Files
        Write-Verbose 'Invoking Convert-TokensInFileList'
        Convert-TokensInFileList -Paths '${{ inputs.parameterFilePath }}' -TokensReplaceWith ($DefaultParameterFileTokens + $CustomParameterFileTokens)

    - name: 'Validate [${{ inputs.templateFilePath }}]'
      shell: pwsh
      run: |
        # Load used functions
        . "$env:GITHUB_ACTION_PATH/scripts/New-ModuleDeployment.ps1"

        $functionInput = @{
          moduleName         = '${{ inputs.moduleName }}'
          templateFilePath   = '${{ inputs.templateFilePath }}'
          parameterFilePath  = '${{ inputs.parameterFilePath }}'
          location           = '${{ inputs.location }}'
          resourceGroupName  = '${{ inputs.resourceGroupName }}'
          subscriptionId     = '${{ inputs.subscriptionId }}'
          managementGroupId  = '${{ inputs.managementGroupId }}'
          removeDeployment  = [System.Convert]::ToBoolean('${{ inputs.removeDeployment }}')
        }

        Write-Verbose "Invoke task with" -Verbose
        Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

        # Invoke deployment
        New-ModuleDeployment @functionInput -Verbose
