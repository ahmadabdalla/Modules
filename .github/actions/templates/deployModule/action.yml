name: 'Deploy module'
description: 'Deploy module'

inputs:
  templateFilePath:
    description: 'The path to the template file to use for deployment'
    required: true
  parameterFilePath:
    description: 'The path to the parameter file to use for deployment'
    required: true
  location:
    description: 'The location to use for deployment'
    required: true
  resourceGroupName:
    description: 'The resource group to deploy to'
    required: false
  subscriptionId:
    description: 'The subscriptionId to deploy to'
    required: false
  managementGroupId:
    description: 'The managementGroupId to deploy to'
    required: false
  removeDeployment:
    description: 'Set "true" to set module up for removal'
    default: 'true'
    required: false

runs:
  using: 'composite'
  steps:
    - name: 'Setup agent'
      shell: pwsh
      run: |
        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

        # Set agent up
        Set-EnvironmentOnAgent

    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    - if: ${{ env.PLATFORM_KEYVAULT && inputs.subscriptionId }}
      name: Parameter File Tokens Azure Key Vault
      id: tokenkeyvault
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: '${{ env.PLATFORM_KEYVAULT }}'
        secrets: '*'

    - name: 'Replace Parameter File Tokens [${{ inputs.parameterFilePath }}] '
      shell: pwsh
      run: |
        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInParameterFile.ps1')
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'helper' 'Add-Mask.ps1')
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'tokensReplacement' 'helper' 'Get-TokenFromKeyVault.ps1')

        # Load Settings File
        $Settings = Get-Content -Path "settings.json" | ConvertFrom-Json
        # Initialize Default Parameter File Tokens
        $DefaultParameterFileTokens = @(
            @{ Name = 'resourceGroupName'; Value = '${{ inputs.resourceGroupName }}' }
            @{ Name = 'subscriptionId'; Value = '${{ inputs.subscriptionId }}' }
            @{ Name = 'managementGroupId'; Value = '${{ inputs.managementGroupId }}' }
            @{ Name = "tenantId"; Value = '${{ env.ARM_TENANT_ID }}' }
            @{ Name = "deploymentSpId"; Value = '${{ env.DEPLOYMENT_SP_ID }}' }
        ) | ForEach-Object { [PSCustomObject]$PSItem }

        # Construct Token Function Input
        $ConvertTokensInputs = @{
            ParameterFilePath                 = '${{ inputs.parameterFilePath }}'
            DefaultParameterFileTokens        = $DefaultParameterFileTokens
            LocalCustomParameterFileTokens    = $Settings.parameterFileTokens.localTokens.tokens
            TokenPrefix                       = $Settings.parameterFileTokens.tokenPrefix
            TokenSuffix                       = $Settings.parameterFileTokens.tokenSuffix
        }
        # Add Remote Custom Parameter File Tokens
        if ('${{ env.PLATFORM_KEYVAULT }}' -and '${{ inputs.subscriptionId }}') {
            $ConvertTokensInputs += @{
                TokensKeyVaultName                 = '${{ env.PLATFORM_KEYVAULT }}'
                TokensKeyVaultSubscriptionId       = '${{ inputs.subscriptionId }}'
                TokensKeyVaultSecretContentType    = $Settings.parameterFileTokens.remoteTokens.keyVaultSecretContentType
            }
        }
        # Invoke Token Replacement Functionality
        $null = Convert-TokensInParameterFile @ConvertTokensInputs -Verbose
        Get-Content '${{ inputs.parameterFilePath }}'
    - name: 'Deploy [${{ inputs.templateFilePath }}]'
      shell: pwsh
      id: deploy_step
      run: |
        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourceDeployment' 'New-ModuleDeployment.ps1')

        $functionInput = @{
          templateFilePath   = Join-Path $env:GITHUB_WORKSPACE '${{ inputs.templateFilePath }}'
          parameterFilePath  = Join-Path $env:GITHUB_WORKSPACE '${{ inputs.parameterFilePath }}'
          location           = '${{ inputs.location }}'
          resourceGroupName  = '${{ inputs.resourceGroupName }}'
          subscriptionId     = '${{ inputs.subscriptionId }}'
          managementGroupId  = '${{ inputs.managementGroupId }}'
          doNotThrow         = $true
        }

        Write-Verbose "Invoke task with" -Verbose
        Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

        # Invoke deployment
        $res = New-ModuleDeployment @functionInput -Verbose

        # Get deployment name
        if($res -is [hashtable]) {
          $deploymentName = $res['DeploymentName']
        } elseif($res -is [string]) {
          $deploymentName = $res
        } else {
          throw ("Output-Type of New-ModuleDeployment invocation has invalid type [{0}]" -f $res.GetType())
        }
        Write-Output ('::set-output name=deploymentName::{0}' -f $deploymentName)

        if($res -is [hashtable]) {
          # Happens only if there is an exception
          throw $res['Exception']
        }

    - name: 'Remove [${{ inputs.templateFilePath }}] from parameters [${{ inputs.parameterFilePath }}]'
      shell: pwsh
      if: always()
      run: |
        if('${{ inputs.removeDeployment }}' -eq 'true') {
          # Load used function
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'resourceRemoval' 'Remove-DeployedModule.ps1')

          $functionInput = @{
              deploymentName    = '${{ steps.deploy_step.outputs.deploymentName }}'
              templateFilePath  = Join-Path $env:GITHUB_WORKSPACE '${{ inputs.templateFilePath }}'
              resourceGroupName = '${{ inputs.resourceGroupName }}'
              verbose           = $true
          }

          Write-Verbose 'Invoke task with' -Verbose
          Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

          Remove-DeployedModule @functionInput
        }
