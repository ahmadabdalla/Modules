parameters:
  # Pipeline-related parameters
  checkoutRepositories: ''
  displayName: 'Checkout Platform Settings'
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120

  # Job specific parameters
  settingsPath: ''

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
  - job: job_checkoutPlatformSettings
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
    steps:
      # [Checkout Repositories] task(s)
      #--------------------------------
      - checkout: self
      - ${{ if ne(parameters.checkoutRepositories, '') }}:
          - ${{ each checkoutRepository in parameters.checkoutRepositories }}:
              - checkout: ${{ checkoutRepository }}
                fetchDepth: 1 # the depth of commits to ask Git to fetch; if not set defaults to no limit
                path: 's/${{ checkoutRepository }}'

      # Get Feature Flags
      #----------------------------
      - task: PowerShell@2
        name: task_featureFlags
        displayName: 'Get Feature Flags'
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # Load Settings File
            $Settings = Get-Content -Path '${{ parameters.settingsPath }}' | ConvertFrom-Json -AsHashTable

            # Get Feature Flags
            $FeatureFlags = $Settings.featureFlags
            $FeatureFlagsKeys = $FeatureFlags.Keys
            Write-Verbose $Settings.featureFlags -Verbose
            foreach($Key in $Settings.featureFlags.Keys){
              $FeatureFlagState = $Settings.featureFlags[$Key].ToString().ToLower()
              Write-Verbose "Feature ==> $Key = $FeatureFlagState" -Verbose
              Write-Output "##vso[task.setvariable variable=$Key;isOutput=true;]$FeatureFlagState"
            }

            # Get Feature Flags (JSON)
            $featuresFlagsJSON = $FeatureFlags | ConvertTo-Json -Compress
            Write-Output "##vso[task.setvariable variable=featuresFlags;isOutput=true;]$featuresFlagsJSON"
