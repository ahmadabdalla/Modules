parameters:
  # Pipeline-related parameters
  checkoutRepositories: ''
  displayName: 'Set Environment Variables'
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120

  # Job specific parameters
  settingsPath: ''

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##
jobs:
  - job: job_setEnvironmentVariables
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}
    steps:
      # [Checkout Repositories] task(s)
      #--------------------------------
      - checkout: self
      - ${{ if ne(parameters.checkoutRepositories, '') }}:
          - ${{ each checkoutRepository in parameters.checkoutRepositories }}:
              - checkout: ${{ checkoutRepository }}
                fetchDepth: 1 # the depth of commits to ask Git to fetch; if not set defaults to no limit
                path: 's/${{ checkoutRepository }}'

      # Get Feature Flags
      #----------------------------
      - task: PowerShell@2
        name: task_setEnvVariables
        displayName: 'Set Environment Variables'
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # Load Settings File
            $Settings = Get-Content -Path (Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.settingsPath }}') | ConvertFrom-Json -AsHashTable

            # Extract Environment Variables
            $Shared_EnvironmentVariables = $Settings.pipelines.shared.variables
            $AzureDevOps_EnvironmentVariables = $Settings.pipelines.azureDevOps.variables

            # Set Environment Variables
            $KeyValuePair = ($Shared_EnvironmentVariables + $AzureDevOps_EnvironmentVariables)
            $Keys = $KeyValuePair.Keys.split(' ')
            foreach ($Key in $Keys) {
              Write-Verbose "$Key=$($KeyValuePair[$Key])"
              Write-Output "##vso[task.setvariable variable=$Key;isOutput=true;]$($KeyValuePair[$Key])"
            }
